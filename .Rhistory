library(GRridge)
setwd("C:/VUData/Tonje/");
datcen <- read.table("methylValues.txt")
dim(datcen)
pvals <-  read.table("wValues_LowMeansRelevant.txt")[,1];
resp <- read.table("Y.txt")[,1]
firstPartition <- CreatePartition(pvals,mingr=25,ngr=50,decreasing=FALSE); partitionP <- list(wPvals=firstPartition)
firstPartition <- CreatePartition(pvals,mingr=25,ngr=10,decreasing=FALSE); partitionP <- list(wPvals=firstPartition)
resp
grTonje <- grridge(datcen,resp,unpenal=~1,partitionP,
monotone = c(TRUE),selection=F,optl=NULL,
savepredobj="all",modus=1,method="exactstable",niter=10)
firstPartition <- CreatePartition(pvals,mingr=50,ngr=5,decreasing=FALSE); partitionP <- list(wPvals=firstPartition)
grTonje <- grridge(datcen,resp,unpenal=~1,partitionP,
monotone = c(TRUE),selection=F,optl=NULL,
savepredobj="all",modus=1,method="exactstable",niter=10)
pvals
hist(pvals)
sort(pvals)[1:100]
firstPartition <- CreatePartition(pvals,mingr=10,ngr=5,decreasing=FALSE); partitionP <- list(wPvals=firstPartition)
grTonje <- grridge(datcen,resp,unpenal=~1,partitionP,
monotone = c(TRUE),selection=F,optl=NULL,
savepredobj="all",modus=1,method="exactstable",niter=10)
grTonjecv <- grridge.cv(grTonje,datcen,resp,outerfold=10)
load("Sboner prostate(2010).Rdata")
abun <- apply(em,1,mean)
sds <- apply(em,1,sd)
Pmean<- CreatePartition(abun,grsize=10)
Psd<- CreatePartition(sds,grsize=10)
part <- list(Pmean=Pmean,Psd=Psd)
setwd("C:\\ExternalData\\HCsnip")
setwd("C:\\VUData\\Marielle\\CGHlogrank")
CN <- read.table("regions_mergedDataNCBI35.txt",row.names=1,header=TRUE, sep="\t", na.strings = c("NA","#N/A"))
chromo <- as.factor(CN$chromosome)
nclone <- CN$nclone
CNdat <- abs(CN[,-(1:4)])
clin <- read.table("SurvivalDataMerged.txt",row.names=1,header=TRUE, sep="\t", na.strings = c("NA","#N/A"))
OS <- clin$survival
status <- clin$status
Y <- Surv(OS,status)
part <- list(chromo=CreatePartition(chromo),ncl = CreatePartition(nclone,grsize=20))
grtonje <- grridge.surv(CNdat,Y,part,unpenal=~1,stepsel=2,optl=NULL,niter=10,selection=T,maxsel=100,savepredobj = "all",innfold=10,cvlmarg=0.1)
grtonje <- grridge(CNdat,Y,part,unpenal=~1,stepsel=2,optl=NULL,niter=10,selection=T,maxsel=100,savepredobj = "all",innfold=10,cvlmarg=0.1)
setwd("C://VUData//Boudewijn//GRridge")
load("gr6.Rdata")
#relevant objects:
#GenVUAll: genome data, 185 patients
#indexVUCox: those to be included for cox-analysis
#RecurYNCox: death or alive?
#CoxTimeVU: surv time
#genvucox <- GenVUAll[,which(indexVUCox)]
timeresp <- ClinData[,which(colnames(ClinData)=="MAX_FUP_MO")]
#coxtime <- timeresp[which(indexVUCox)]
status02 <- ClinData[,which(colnames(ClinData)=="MAX_FUP_MO")+1]
#status2 <- 1-status02[which(indexVUCox)]
site <- ClinData[,which(colnames(ClinData)=="tumorsite_new_general")]
hpv <- ClinData[,which(colnames(ClinData)=="HPV")]
#whop <- intersect(which(site=="op"),which(hpv=="n"))
#ysurvop <- Surv(timeresp[whop],1-status02[whop])
#genvucoxop <- GenVUAll[,whop]
whoc <- intersect(which(site=="oc"),which(hpv=="n"))
ysurvoc <- Surv(timeresp[whoc],1-status02[whoc])
genvucoxoc <- GenVUAll[,whoc]
#random split
nsam <- ncol(genvucox)
set.seed(21235)
spl1 <- sort(sample(1:nsam,75))
spl2 <- (1:nsam)[-spl1]
gvc1 <- genvucoxoc[,spl1]
gvc2 <- genvucoxoc[,spl2]
ysurv1 <- ysurvoc[spl1]
ysurv2 <- ysurvoc[spl2]
pvfun <- function(dat,sur){
cph <- coxph(surd~datd,data=data.frame(datd=dat,surd=sur))
lrt <- summary(cph)$sctest[3]
return(lrt)
}
pmt <- proc.time()
pvs1 <- apply(gvc1,1,pvfun,sur=ysurv1)
proc.time()-pmt #takes 2 minutes
pvs2 <- apply(gvc2,1,pvfun,sur=ysurv2)
cor(log(pvs1),log(pvs2))
wh <- which(pvs1<=0.05)
length(which(pvs2[wh]<=0.01))
length(wh)*0.01
gvc1cen <- (gvc1-apply(gvc1,1,mean))/apply(gvc1,1,sd)
gvc2cen <- (gvc2-apply(gvc2,1,mean))/apply(gvc1,1,sd)
gvccen <- (genvucoxoc-apply(genvucoxoc,1,mean))/apply(genvucoxoc,1,sd)
wh <- which(pvs1<=0.10)
pvs1sel <- pvs1[wh]
pvs2sel <- pvs2[wh]
gvc1censel <- gvc1cen[wh,]
gvc2censel <- gvc2cen[wh,]
nsam <- ncol(genvucoxoc)
set.seed(21235)
spl1 <- sort(sample(1:nsam,75))
spl2 <- (1:nsam)[-spl1]
gvc1 <- genvucoxoc[,spl1]
gvc2 <- genvucoxoc[,spl2]
ysurv1 <- ysurvoc[spl1]
ysurv2 <- ysurvoc[spl2]
pvfun <- function(dat,sur){
cph <- coxph(surd~datd,data=data.frame(datd=dat,surd=sur))
lrt <- summary(cph)$sctest[3]
return(lrt)
}
pmt <- proc.time()
pvs1 <- apply(gvc1,1,pvfun,sur=ysurv1)
proc.time()-pmt #takes 2 minutes
pvs2 <- apply(gvc2,1,pvfun,sur=ysurv2)
dim(gvc1cen)
gvc1cen <- (gvc1-apply(gvc1,1,mean))/apply(gvc1,1,sd)
gvc2cen <- (gvc2-apply(gvc2,1,mean))/apply(gvc1,1,sd)
gvccen <- (genvucoxoc-apply(genvucoxoc,1,mean))/apply(genvucoxoc,1,sd)
dim(gvc1cen)
sort(pvs1sel)[1:100]
sort(pvs1)[1:100]
grsurvBoudewijn <- grridge.surv(highdimdata =gvc2censel,response = ysurv2,
partitions <- list(pvals=CreatePartition(pvs1sel,mingr=50,ngr=10,decreasing=FALSE)),
unpenal = ~1, monotone=c(TRUE), selection=TRUE,maxsel=200,stepsel=5,savepredobj="all",comparelasso=TRUE)
wh <- which(pvs1<=0.10)
pvs1sel <- pvs1[wh]
pvs2sel <- pvs2[wh]
gvc1censel <- gvc1cen[wh,]
gvc2censel <- gvc2cen[wh,]
dim(gvc2censel)
grsurvBoudewijn <- grridge(highdimdata =gvc2censel,response = ysurv2,
partitions <- list(pvals=CreatePartition(pvs1sel,mingr=50,ngr=10,decreasing=FALSE)),
unpenal = ~1, monotone=c(TRUE), selection=TRUE,maxsel=200,stepsel=5,savepredobj="all",comparelasso=TRUE)
grsurvBoudewijn <- grridge(highdimdata =gvc2censel,response = ysurv2,
partitions <- list(pvals=CreatePartition(pvs1sel,mingr=50,ngr=10,decreasing=FALSE)),
unpenal = ~1, monotone=c(TRUE), selection=TRUE,maxsel=200,stepsel=5,savepredobj="all",comparelasso=TRUE,innfold=5)
wh <- which(pvs1<=0.001)
pvs1sel <- pvs1[wh]
pvs2sel <- pvs2[wh]
gvc1censel <- gvc1cen[wh,]
gvc2censel <- gvc2cen[wh,]
dim(gvc1censel)
grsurvBoudewijn <- grridge(highdimdata =gvc2censel,response = ysurv2,
partitions <- list(pvals=CreatePartition(pvs1sel,mingr=20,ngr=10,decreasing=FALSE)),
unpenal = ~1, monotone=c(TRUE), selection=TRUE,maxsel=200,stepsel=5,savepredobj="all",comparelasso=TRUE,innfold=5)
setwd("C:\\VUData\\Maarten\\AnalysePlanProject2");load("mirnorms.Rdata")
abundance=rowSums(mirnormTS)
partkeep <- list(abund = CreatePartition(abundance,uniform=T,ngr=2))
grMaartenSurv <- grridge(mirnormcenTS_PFS,survPFS,partkeep, unpenal = ~1 + adjth + thscheme + age + neoadj + pcrcdiff,
niter=3,method="exactstable",dataunpen = datfr,monotone=c(TRUE),selection=F,maxsel=25,
innfold=10,compareunpenal = T,comparelasso = F)
objects()
load("mirnorms.Rdata")
cn <- colnames(outcomeOS)
stime <- outcomeOS[,which(cn=="OS")]
event <- outcomeOS[,which(cn=="Event_OS")]
whOSNA <- which(is.na(event) | exclude==2)
survOS <- Surv(stime[-whOSNA],event[-whOSNA])
mirnormcen_OS <- mirnormcen[,-whOSNA]
mirnormcenTS_OS <- mirnormcenTS[,-whOSNA]
if(excl==1) exclude <- outcomeResp[,1] else exclude <- outcomeResp[,2]
excl<-2
if(excl==1) exclude <- outcomeResp[,1] else exclude <- outcomeResp[,2]
whrespNA <- which(is.na(response) | exclude==2)
cn <- colnames(outcomeOS)
stime <- outcomeOS[,which(cn=="OS")]
event <- outcomeOS[,which(cn=="Event_OS")]
whOSNA <- which(is.na(event) | exclude==2)
survOS <- Surv(stime[-whOSNA],event[-whOSNA])
mirnormcen_OS <- mirnormcen[,-whOSNA]
mirnormcenTS_OS <- mirnormcenTS[,-whOSNA]
cn <- colnames(outcomePFS)
stime <- outcomePFS[,which(cn=="PFS")]
event <- outcomePFS[,which(cn=="Event_PFS")]
whPFSNA <- which(is.na(event) | exclude==2)
survPFS <- Surv(stime[-whPFSNA],event[-whPFSNA])
mirnormcen_PFS <- mirnormcen[,-whPFSNA]
mirnormcenTS_PFS <- mirnormcenTS[,-whPFSNA]
setwd("C:\\VUData\\Maarten\\AnalysePlanProject2")
dataraw=read.table("miRseq.txt",header=TRUE, sep="\t", na.strings = c("NA","#N/A"))
cn <- colnames(dataraw)[-(1:2)]
outcomeResp = read.table("Covariaat_response.txt",header=TRUE,row.names=1, sep="\t", na.strings = c("NA","#N/A"))
NewResp = read.table("Respons_30_10_2015.txt",header=TRUE,row.names=1, sep="\t", na.strings = c("NA","#N/A"))
catresp <- NewResp[,9]
PDvsPR <- sapply(as.character(catresp), function(x) if(x=="PD") return(2) else {if(x=="PR") return(1) else return(NA)})
#outcomeResp[,7] <- NewResp[,8]
outcomeResp[,7] <- PDvsPR
outcomeOS = read.table("Covariaat_OS.txt",header=TRUE,row.names=1, sep="\t", na.strings = c("NA","#N/A"))
outcomePFS = read.table("Covariaat_PFS.txt",header=TRUE,row.names=1, sep="\t", na.strings = c("NA","#N/A"))
# edit(outcomeResp)
# edit(outcomeOS)
# edit(outcomePFS)
dim(outcomeResp)
dim(outcomeResp)
dim(outcomeResp)
dim(dataraw)  #contains two annotation columns
#    1= Xeloda monotherapie
#    2= Xeloda + oxaliplatin al dan niet met bevacizumab of cetuximab
#    3= Xeloda + irinotecan al dan niet met bevacizumab of cetuximab
#    1= progressive disease; 2= clinical TherBenefit
therapy = factor(sapply(outcomeResp[,4],function(i) {if(i==1) return("XelMono") else {if(i==2) return("XelOxa") else return("XelIri")}}))
resp = factor(sapply(outcomeResp[,7],function(i) {if(i==1) return("TherBenefit") else return("Progr")}))
match(colnames(dataraw[,-(1:3)]),rownames(outcome))==(1:nrow(outcome))
#library sizes
dataann <- dataraw[,1:2]
datacounts <- dataraw[,-(1:2)]
rn <- as.character(dataann[,1])
rnkeep <- rn[keep]
TumMirs <- read.table("tumor_specific_miRs.txt",header=TRUE, sep="\t", na.strings = c("NA","#N/A"))
dataann <- dataraw[,1:2]
datacounts <- dataraw[,-(1:2)]
rn <- as.character(dataann[,1])
rownames(datacounts) <- sapply(1:nrow(datacounts),function(i) paste(rn[i],i))
libs <- colSums(datacounts)
summary(libs)
keep <- which(rowSums(datacounts>0) >= 5)
rnkeep <- rn[keep]
TumMirs <- read.table("tumor_specific_miRs.txt",header=TRUE, sep="\t", na.strings = c("NA","#N/A"))
TSfac <- as.factor(rnkeep %in% TumMirs[,1])
getwd()
save(mirnormcen_OS,mirnormcen_PFS,mirnormcenTS_OS,mirnormcenTS_PFS,survPFS,survOS,TSfac,"forGRridgeSurv.Rdata")
save(mirnormcen_OS,mirnormcen_PFS,mirnormcenTS_OS,mirnormcenTS_PFS,survPFS,survOS,TSfac,file="forGRridgeSurv.Rdata")
setwd("C:\\VUData\\Maarten\\AnalysePlanProject2");load("mirnorms.Rdata");load("forGRridgeSurv.Rdata")
abundance=rowSums(mirnormTS)
abundance=rowSums(mirnorm)
objects()
abundance=rowSums(mirnorm2)
abundance[1:10]
length(abundance)
length(TSfac)
partkeep <- list(abund = CreatePartition(abundance,uniform=T,ngr=5),TS=CreatePartition(TSfac))
partkeep <- list(abund = CreatePartition(abundance,mingr=200,ngr=5),TS=CreatePartition(TSfac))
partkeep <- list(abund = CreatePartition(abundance,mingr=100,ngr=10),TS=CreatePartition(TSfac))
grMaartenSurv <- grridge(mirnormcen_PFS,survPFS,partkeep, unpenal = ~1 + adjth + thscheme + age + neoadj + pcrcdiff,
niter=3,method="exactstable",dataunpen = datfr,monotone=c(TRUE,FALSE),selection=F,maxsel=25,
innfold=10,compareunpenal = T,comparelasso = F)
response <- outcomeResp[,7]
exclude <- outcomeResp[,2]
whrespNA <- which(is.na(response) | exclude==2)
mirnormcen_resp <- mirnormcen[,-whrespNA]
resp = factor(sapply(outcomeResp[-whrespNA,7],function(i) {if(i==1) return("TherBenefit") else return("Progr")}))
covs <- outcomeResp[-whrespNA,]
adjth <- as.factor(covs[,3])
thscheme <- as.factor(covs[,4])
age <- covs[,5]
pcrcdiff0<- covs[,6]
whichnadiff <- which(is.na(pcrcdiff0) | pcrcdiff0==1)
if(length(whichnadiff) > 0) pcrcdiff0[whichnadiff] <- 2
pcrcdiff <- as.factor(pcrcdiff0)
datfr <- data.frame(adjth,thscheme,age,pcrcdiff)
dim(datfr)
dim(mirnormcen_PFS)
save(datfr,file="covariates.Rdata")
covs <- outcomePFS[-whPFSNA,]
adjth <- as.factor(covs[,3])
thscheme <- as.factor(covs[,4])
neoadj <- as.factor(covs[,5])
datfr <- data.frame(adjth,thscheme,age,pcrcdiff,neoadj)
save(datfr,file="covariates.Rdata")
setwd("C:\\VUData\\Maarten\\AnalysePlanProject2");load("mirnorms.Rdata");load("forGRridgeSurv.Rdata");load("covariates.Rdata")
grMaartenSurv <- grridge(mirnormcen_PFS,survPFS,partkeep, unpenal = ~1 + adjth + thscheme + age + neoadj + pcrcdiff,
niter=3,method="exactstable",dataunpen = datfr,monotone=c(TRUE,FALSE),selection=F,maxsel=25,
innfold=10,compareunpenal = T,comparelasso = F)
survPFS
survPFS
grMaartenSurv <- grridge(mirnormcen_PFS,survPFS,partkeep, unpenal = ~1 + adjth + thscheme + age + neoadj + pcrcdiff,
niter=3,method="exactstable",dataunpen = datfr,monotone=c(TRUE,FALSE),selection=F,maxsel=25,
innfold=10,compareunpenal = T,comparelasso = F,optl=1000)
grMaartenSurv <- grridge(mirnormcen_PFS,survPFS,partkeep, unpenal = ~1 + adjth + thscheme + age + neoadj + pcrcdiff,
niter=3,method="exactstable",dataunpen = datfr,monotone=c(TRUE,FALSE),selection=F,maxsel=25,
innfold=10,compareunpenal = T,comparelasso = F,optl=10000)
head(mirnormcen_PFS)
setwd("C:/VUData/Wina/MethInfComplete/")
#load("inputWridgeNonNA_prom.Rdata")
load("inputWridgeNonNAFU.Rdata")
library(GRridge)
pvalFarkas <- selsumm[,5]
firstPartition <- CreatePartition(pvalFarkas,uniform=F,mingr=25,ngroup=10,decreasing=FALSE)
load("/scratch/mark/Wina/MethInfComplete/MethyNormM_batchcor.Rdata")
CpGann <- factor(as.character(MethyNormM_batchcor@featureData@data[whfark0,10]))
load("Annotation.Rdata")
CpGann <- factor(as.character(Annotation[whfark0,10]))
thirdPartition <- CreatePartition(CpGann)
#Concatenate three partitions
partitionsVerlaat <- list(pFarkas=firstPartition,cpg=thirdPartition)
grwinacomplint <- grridge(betasfcen,fl,partitionsVerlaat,unpenal=~1,method="exactstable",
monotone = c(TRUE,FALSE),selection=TRUE,maxsel=25,savepredobj="all",comparelasso = T)
grwinacomplint.cv <- grridge.cv(grwinacomplint,betasfcen,fl,outerfold=10)
grwinacomplint <- grridge(betasfcen,fl,partitionsVerlaat,unpenal=~1,method="exactstable",
monotone = c(TRUE,FALSE),selection=TRUE,maxsel=15,savepredobj="all",comparelasso = T)
grwinacomplint.cv <- grridge.cv(grwinacomplint,betasfcen,fl,outerfold=10)
grwinacomplint0 <- grridge(betasfcen,fl,partitionsVerlaat,unpenal=~1,method="exactstable",niter=0,
monotone = c(TRUE,FALSE),selection=TRUE,maxsel=15,savepredobj="all")
grwinacomplint0.cv <- grridge.cv(grwinacomplint0,betasfcen,fl,outerfold=10)
save(grwinacomplint,grwinacomplint.cv,grwinacomplint0,grwinacomplint0.cv,file="grwinacomplintexactstable.Rdata")
cutoffs <- rev(seq(0,1,by=0.01))
rocridgeV <- roc(probs=grwinacomplint.cv[,2],true=grwinacomplint.cv[,1],cutoffs)
auc(rocridgeV)
rocgrridgeV <- roc(probs=grwinacomplint.cv[,3],true=grwinacomplint.cv[,1],cutoffs)
auc(rocgrridgeV)
rocgrridgeSelV <- roc(probs=grwinacomplint.cv[,4],true=grwinacomplint.cv[,1],cutoffs)
auc(rocgrridgeSelV)
roclasso <- roc(probs=grwinacomplint.cv[,5],true=grwinacomplint.cv[,1],cutoffs)
auc(roclasso)
library(GRridge)
library(GRridge)
library(GRridge)
library(GRridge)
install.package("digest")
install.packages("digest")
source('C:/Synchr/RPackages/GRridge/V30/GRridge/R/grridgecv.R', echo=TRUE)
library(GRridge)
library(GRridge)
load("C:/VUdata/Wurdinger/WurdingerAll.RData")
compareGroups = c("Breast","CRC")
dataSqrt =  sqrt(WurdingerAll[[2]])
group = as.factor(WurdingerAll[[1]][,2])
g1 = compareGroups[1]; g2 = compareGroups[2]
id1 = which(group==g1) #index of group 1
id2 = which(group==g2) #index of group 2
resp = factor(group[c(id1,id2)])
datSqrt = dataSqrt[,c(id1,id2)]
#filtering based on sd (removing markers whose sd=0, no variablity across samples)
sds = apply(datSqrt,1,sd)
id.del = which(sds==0)
datSqrt = datSqrt[-id.del,]
# standardized data
datStd = t(apply(datSqrt,1,function(x){(x-mean(x))/sd(x)}))
# #################################################################################### #
# ################################################################################### #
# standard deviation
Sds = apply(datSqrt,1,sd)
parSds = CreatePartition(Sds,decreasing=TRUE,ngroup=10,mingr=25)
# abundance
abn = rowSums(dataSqrt^2)
parAbn = CreatePartition(abn,decreasing=TRUE,ngroup=10,mingr=25)
# #################################################################################### #
parSym = list(parAbn=parAbn, sds=parSds)
library(GRridge)
load("C:/VUdata/Wurdinger/WurdingerAll.RData")
compareGroups = c("Breast","CRC")
dataSqrt =  sqrt(WurdingerAll[[2]])
group = as.factor(WurdingerAll[[1]][,2])
g1 = compareGroups[1]; g2 = compareGroups[2]
id1 = which(group==g1) #index of group 1
id2 = which(group==g2) #index of group 2
resp = factor(group[c(id1,id2)])
datSqrt = dataSqrt[,c(id1,id2)]
#filtering based on sd (removing markers whose sd=0, no variablity across samples)
sds = apply(datSqrt,1,sd)
id.del = which(sds==0)
datSqrt = datSqrt[-id.del,]
# standardized data
datStd = t(apply(datSqrt,1,function(x){(x-mean(x))/sd(x)}))
# #################################################################################### #
# ################################################################################### #
# standard deviation
library(GRridge)
Sds = apply(datSqrt,1,sd)
parSds = CreatePartition(Sds,decreasing=TRUE,ngroup=10,mingr=25)
# abundance
abn = rowSums(dataSqrt^2)
parAbn = CreatePartition(abn,decreasing=TRUE,ngroup=10,mingr=25)
# #################################################################################### #
parSym = list(parAbn=parAbn, sds=parSds)
grWurdinger_onco <- grridge(datStd,resp,parSds,monotone = c(TRUE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
grWurdinger_onco <- grridge(datStd,resp,parSds,monotone = c(TRUE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=1)
library(GRridge)
grWurdinger_onco <- grridge(datStd,resp,parSds,monotone = c(TRUE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=1)
grWurdinger_onco <- grridge(datStd,resp,parSds,monotone = c(TRUE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
grWurdinger_onco <- grridge(datStd,resp,parSym,monotone = c(TRUE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
grWurdinger_onco <- grridge(datStd,resp,parSym,monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
Sds = apply(datSqrt,1,sd)
parSds = CreatePartition(Sds,decreasing=TRUE,ngroup=10,mingr=25)
# abundance
abn = rowSums(dataSqrt^2)
parAbn = CreatePartition(abn,decreasing=TRUE,ngroup=10,mingr=25)
# #################################################################################### #
parSym = list(parAbn=parAbn, sds=parSds)
# source('C:/Synchr/RPackages/GRridge/V30/GRridge/R/grridgecvtemp.R')
# source('C:/Synchr/RPackages/GRridge/V30/GRridge/R/grridgetemp.R')
grWurdinger_onco <- grridge(datStd,resp,parSym,monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
Sds = apply(datSqrt,1,sd)
parSds = CreatePartition(Sds,decreasing=TRUE,ngroup=10,mingr=25)
# abundance
abn = rowSums(datSqrt^2)
parAbn = CreatePartition(abn,decreasing=TRUE,ngroup=10,mingr=25)
# #################################################################################### #
parSym = list(parAbn=parAbn, sds=parSds)
# source('C:/Synchr/RPackages/GRridge/V30/GRridge/R/grridgecvtemp.R')
# source('C:/Synchr/RPackages/GRridge/V30/GRridge/R/grridgetemp.R')
grWurdinger_onco <- grridge(datStd,resp,parSym,monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
grWurdinger_onco <- grridge(datStd,resp,parSym,monotone = c(TRUE,FALSE),compareEN=T,maxsel=5,innfold=10,optl=115.2419, savepredobj="all",niter=3,modus=2)
?"grridge"
library(GRridge)
?"grridge"
library(GRridge)
?"grridge"
library(GRridge)
?"grridge"
grridge
grWurdinger_onco <- grridge(datStd,resp,parSym,
monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, compareEN=T,savepredobj="all",niter=1,modus=2)
grWurdinger_onco <- grridge(datStd,resp,parSym,
monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, compareEN=F,savepredobj="all",niter=1,modus=2)
grWurdinger_onco <- grridge(datStd,resp,parSym,
monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, compareEN=F,savepredobj="all",niter=2,modus=2)
library(GRridge)
grWurdinger_onco <- grridge(datStd,resp,parSym,
monotone = c(TRUE,FALSE),innfold=10,optl=115.2419, compareEN=F,savepredobj="all",niter=2,modus=2)
source('C:/Synchr/RPackages/GRridge/V31/GRridge/R/grridge.R')
library(GRridge)
library(GRridge)
?CreatePartition
library(GRridge)
install.packages(R2BGLIMS,repository="http://github.com")
install.packages("R2BGLIMS",repository="http://github.com")
?install.packages
install.packages("R2BGLIMS",repos="http://github.com")
install_github("R2BGLIMS")
library(devtools)
install_github("R2BGLIMS")
install_github("R2BGLIMS",username="markvdwiel")
install_github("R2BGLIMS",username="markvdwiel")
install_github("R2BGLIMS",username="markvdwiel/R2BGLIMS")
install.packages("C:/Synchr/RPackages/R2BGLiMS-master.zip", repos = NULL, type = "win.binary")
library(`R2BGLiMS-master`)
library(`R2BGLiMS`)
library(R2BGLIMS)
library(R2BGLiMS)
library(R2BGLiMS-master)
library(devtools)
install_github("pjnewcombe/R2BGLiMS")
library(R2BGLIMS)
library(R2BGLiMS)
vignette(R2BGLiMS)
??R2BGLiMS
citation("R2BGLiMS")
author("R2BGLiMS")
??"R2BGLiMS"
p = 5000; n=100
L = matrix(rnorm(p*n), nrow=p)
R = matrix(rnorm(p*n), nrow=n)
#naive
pmt <- proc.time()
C = L %*% R; sum(C*C)
proc.time()-pmt
#
#faster
pmt <- proc.time()
sum((t(L) %*% L) * (R %*% t(R)))
proc.time()-pmt
#
p = 5000; n=100
L = matrix(rnorm(p*n), nrow=p)
R = matrix(rnorm(p*n), nrow=n)
#naive
pmt <- proc.time()
C = L %*% R; sum(C*C)
proc.time()-pmt
p <- 50000
n=100
L = matrix(rnorm(p*n), nrow=p)
R = matrix(rnorm(p*n), nrow=n)
#faster
pmt <- proc.time()
sum((t(L) %*% L) * (R %*% t(R)))
proc.time()-pmt
#
#naive
pmt <- proc.time()
C = L %*% R; sum(C*C)
proc.time()-pmt
#
